/* Copyright 2021 The Waymo Open Dataset Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================*/

// This proto contains the  Waymo Open Dataset Motion source data.

syntax = "proto2";

package agents.protos;

message Map {
  // The full set of map features.
  repeated MapFeature map_features = 1;

  // A set of dynamic states per time step. These are ordered in consecutive
  // time steps.
  repeated DynamicState dynamic_states = 2;


}

message DynamicState {
  // The timestamp associated with the dynamic feature data.
  optional double timestamp_seconds = 1;

  // The set of traffic signal states for the associated time step.
  repeated TrafficSignalLaneState lane_states = 2;
}

message TrafficSignalLaneState {
  // The ID for the MapFeature corresponding to the lane controlled by this
  // traffic signal state.
  optional int64 lane = 1;

  enum State {
    LANE_STATE_UNKNOWN = 0;

    // States for traffic signals with arrows.
    LANE_STATE_ARROW_STOP = 1;
    LANE_STATE_ARROW_CAUTION = 2;
    LANE_STATE_ARROW_GO = 3;

    // Standard round traffic signals.
    LANE_STATE_STOP = 4;
    LANE_STATE_CAUTION = 5;
    LANE_STATE_GO = 6;

    // Flashing light signals.
    LANE_STATE_FLASHING_STOP = 7;
    LANE_STATE_FLASHING_CAUTION = 8;
  }

  // The state of the traffic signal.
  optional State state = 2;

  // The stopping point along the lane controlled by the traffic signal.
  // This is the point where dynamic objects must stop when the signal is in a
  // stop state.
  optional MapPoint stop_point = 3;
}

message MapFeature {
  // A unique ID to identify this feature.
  optional int64 id = 1;

  // Type specific data.
  oneof feature_data {
    LaneCenter lane = 3;
    RoadLine road_line = 4;
    RoadEdge road_edge = 5;
    StopSign stop_sign = 7;
    Crosswalk crosswalk = 8;
    SpeedBump speed_bump = 9;
    Driveway driveway = 10;
  }
}

message MapPoint {
  // Position in meters. The origin is an arbitrary location.
  optional double x = 1;
  optional double y = 2;
  optional double z = 3;
}

// A segment of a lane with a given adjacent boundary.
message BoundarySegment {
  // The index into the lane's polyline where this lane boundary starts.
  optional int32 lane_start_index = 1;

  // The index into the lane's polyline where this lane boundary ends.
  optional int32 lane_end_index = 2;

  // The adjacent boundary feature ID of the MapFeature for the boundary. This
  // can either be a RoadLine feature or a RoadEdge feature.
  optional int64 boundary_feature_id = 3;

  // The adjacent boundary type. If the boundary is a road edge instead of a
  // road line, this will be set to TYPE_UNKNOWN.
  optional RoadLine.RoadLineType boundary_type = 4;
}

message LaneNeighbor {
  // The feature ID of the neighbor lane.
  optional int64 feature_id = 1;

  // The self adjacency segment.
  // The other lane may only be a neighbor for only part of this lane. These
  // indices define the points within this lane's polyline for which feature_id
  // is a neighbor. If the lanes are neighbors at disjoint places (e.g., a
  // median between them appears and then goes away) multiple neighbors will be
  // listed. A lane change can only happen from this segment of this lane into
  // the segment of the neighbor lane defined by neighbor_start_index and
  // neighbor_end_index.
  optional int32 self_start_index = 2;
  optional int32 self_end_index = 3;

  // The neighbor adjacency segment.
  // These indices define the valid portion of the neighbor lane's polyline
  // where that lane is a neighbor to this lane. A lane change can only happen
  // into this segment of the neighbor lane from the segment of this lane
  // defined by self_start_index and self_end_index.
  optional int32 neighbor_start_index = 4;
  optional int32 neighbor_end_index = 5;

  // A list of segments within the self adjacency segment that have different
  // boundaries between this lane and the neighbor lane. Each entry in this
  // field contains the boundary type between this lane and the neighbor lane
  // along with the indices into this lane's polyline where the boundary type
  // begins and ends.
  repeated BoundarySegment boundaries = 6;
}

message LaneCenter {
  // The speed limit for this lane.
  optional double speed_limit_mph = 1;

  // Type of this lane.
  enum LaneType {
    TYPE_UNDEFINED = 0;
    TYPE_FREEWAY = 1;
    TYPE_SURFACE_STREET = 2;
    TYPE_BIKE_LANE = 3;
  }
  optional LaneType type = 2;

  // True if the lane interpolates between two other lanes.
  optional bool interpolating = 3;

  // The polyline data for the lane. A polyline is a list of points with
  // segments defined between consecutive points.
  repeated MapPoint polyline = 8;

  // A list of IDs for lanes that this lane may be entered from.
  repeated int64 entry_lanes = 9 [packed = true];

  // A list of IDs for lanes that this lane may exit to.
  repeated int64 exit_lanes = 10 [packed = true];

  // The boundaries to the left of this lane. There may be different boundary
  // types along this lane. Each BoundarySegment defines a section of the lane
  // with a given boundary feature to the left. Note that some lanes do not have
  // any boundaries (i.e. lane centers in intersections).
  repeated BoundarySegment left_boundaries = 13;

  // The boundaries to the right of this lane. See left_boundaries for details.
  repeated BoundarySegment right_boundaries = 14;

  // A list of neighbors to the left of this lane. Neighbor lanes
  // include only adjacent lanes going the same direction.
  repeated LaneNeighbor left_neighbors = 11;

  // A list of neighbors to the right of this lane. Neighbor lanes
  // include only adjacent lanes going the same direction.
  repeated LaneNeighbor right_neighbors = 12;
}

message RoadEdge {
  // Type of this road edge.
  enum RoadEdgeType {
    TYPE_UNKNOWN = 0;
    // Physical road boundary that doesn't have traffic on the other side (e.g.,
    // a curb or the k-rail on the right side of a freeway).
    TYPE_ROAD_EDGE_BOUNDARY = 1;
    // Physical road boundary that separates the car from other traffic
    // (e.g. a k-rail or an island).
    TYPE_ROAD_EDGE_MEDIAN = 2;
  }

  // The type of road edge.
  optional RoadEdgeType type = 1;

  // The polyline defining the road edge. A polyline is a list of points with
  // segments defined between consecutive points.
  repeated MapPoint polyline = 2;
}

message RoadLine {
  // Type of this road line.
  enum RoadLineType {
    TYPE_UNKNOWN = 0;
    TYPE_BROKEN_SINGLE_WHITE = 1;
    TYPE_SOLID_SINGLE_WHITE = 2;
    TYPE_SOLID_DOUBLE_WHITE = 3;
    TYPE_BROKEN_SINGLE_YELLOW = 4;
    TYPE_BROKEN_DOUBLE_YELLOW = 5;
    TYPE_SOLID_SINGLE_YELLOW = 6;
    TYPE_SOLID_DOUBLE_YELLOW = 7;
    TYPE_PASSING_DOUBLE_YELLOW = 8;
  }

  // The type of the lane boundary.
  optional RoadLineType type = 1;

  // The polyline defining the road edge. A polyline is a list of points with
  // segments defined between consecutive points.
  repeated MapPoint polyline = 2;
}

message StopSign {
  // The IDs of lane features controlled by this stop sign.
  repeated int64 lane = 1;

  // The position of the stop sign.
  optional MapPoint position = 2;
}

message Crosswalk {
  // The polygon defining the outline of the crosswalk. The polygon is assumed
  // to be closed (i.e. a segment exists between the last point and the first
  // point).
  repeated MapPoint polygon = 1;
}

message SpeedBump {
  // The polygon defining the outline of the speed bump. The polygon is assumed
  // to be closed (i.e. a segment exists between the last point and the first
  // point).
  repeated MapPoint polygon = 1;
}

message Driveway {
  // The polygon defining the outline of the driveway region. The polygon is
  // assumed to be closed (i.e. a segment exists between the last point and the
  // first point).
  repeated MapPoint polygon = 1;
}

message ObjectState {
  // Coordinates of the center of the object bounding box.
  optional double center_x = 2;
  optional double center_y = 3;
  optional double center_z = 4;

  // The dimensions of the bounding box in meters.
  optional float length = 5;
  optional float width = 6;
  optional float height = 7;

  // The yaw angle in radians of the forward direction of the bounding box (the
  // vector from the center of the box to the middle of the front box segment)
  // counter clockwise from the X-axis (right hand system about the Z axis).
  // This angle is normalized to [-pi, pi).
  optional float heading = 8;

  // The velocity vector in m/s. This vector direction may be slightly different
  // from the heading of the bounding box.
  optional float velocity_x = 9;
  optional float velocity_y = 10;

  // False if the state data is invalid or missing.
  optional bool valid = 11;
}

// The object states for a single object through the scenario.
message Track {
  enum ObjectType {
    TYPE_UNSET = 0;  // This is an invalid state that indicates an error.
    TYPE_VEHICLE = 1;
    TYPE_PEDESTRIAN = 2;
    TYPE_CYCLIST = 3;
    TYPE_OTHER = 4;
  }

  // The unique ID of the object being tracked. The IDs start from zero and are
  // non-negative.
  optional int32 id = 1;

  // The type of object being tracked.
  optional ObjectType object_type = 2;

  // The object states through the track. States include the 3D bounding boxes
  // and velocities.
  repeated ObjectState states = 3;
}

// The dynamic map information at a single time step.
message DynamicMapState {
  // The traffic signal states for all observed signals at this time step.
  repeated TrafficSignalLaneState lane_states = 1;
}

// An object that must be predicted for the scenario.
message RequiredPrediction {
  // A difficulty level for predicting a given track.
  enum DifficultyLevel {
    NONE = 0;
    LEVEL_1 = 1;
    LEVEL_2 = 2;
  }

  // An index into the Scenario `tracks` field for the object to be predicted.
  optional int32 track_index = 1;

  // The difficulty level for this object.
  optional DifficultyLevel difficulty = 2;
}

message Scenario {
  reserved 9;

  // The unique ID for this scenario.
  optional string scenario_id = 5;

  // Timestamps corresponding to the track states for each step in the scenario.
  // The length of this field is equal to tracks[i].states_size() for all tracks
  // i and equal to the length of the dynamic_map_states_field.
  repeated double timestamps_seconds = 1;

  // The index into timestamps_seconds for the current time. All time steps
  // after this index are future data to be predicted. All steps before this
  // index are history data.
  optional int32 current_time_index = 10;

  // Tracks for all objects in the scenario. All object tracks in all scenarios
  // in the dataset have the same number of object states. In this way, the
  // tracks field forms a 2 dimensional grid with objects on one axis and time
  // on the other. Each state can be associated with a timestamp in the
  // 'timestamps_seconds' field by its index. E.g., tracks[i].states[j] indexes
  // the i^th agent's state at time timestamps_seconds[j].
  repeated Track tracks = 2;

  // The dynamic map states in the scenario (e.g. traffic signal states).
  // This field has the same length as timestamps_seconds. Each entry in this
  // field can be associated with a timestamp in the 'timestamps_seconds' field
  // by its index. E.g., dynamic_map_states[i] indexes the dynamic map state at
  // time timestamps_seconds[i].
  repeated DynamicMapState dynamic_map_states = 7;

  // The set of static map features for the scenario.
  repeated MapFeature map_features = 8;

  // The index into the tracks field of the autonomous vehicle object.
  optional int32 sdc_track_index = 6;

  // A list of objects IDs in the scene detected to have interactive behavior.
  // The objects in this list form an interactive group. These IDs correspond
  // to IDs in the tracks field above.
  repeated int32 objects_of_interest = 4;

  // A list of tracks to generate predictions for. For the challenges, exactly
  // these objects must be predicted in each scenario for test and validation
  // submissions. This field is populated in the training set only as a
  // suggestion of objects to train on.
  repeated RequiredPrediction tracks_to_predict = 11;

  // Per time step Lidar data. This contains lidar up to the current time step
  // such that compressed_frame_laser_data[i] corresponds to the states at
  // timestamps_seconds[i] where i <= current_time_index.
  // This field is not populated in all versions of the dataset.
  //  repeated CompressedFrameLaserData compressed_frame_laser_data = 12;

  // Per time step camera tokens. This contains camera tokens up to the current
  // time step such that frame_camera_tokens[i] corresponds to the states at
  // timestamps_seconds[i] where i <= current_time_index.
  // This field is not populated in all versions of the dataset.
  //  repeated FrameCameraTokens frame_camera_tokens = 13;
}
